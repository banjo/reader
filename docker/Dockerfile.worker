# # Use Node.js LTS version
# FROM node:18-alpine

# # Create the directory for the application
# WORKDIR /app

# # First copy the main package.json and install global dependencies
# COPY package.json .
# RUN npm install -g pnpm

# # Copy over the monorepo
# COPY . .

# # Install packages and build
# RUN pnpm install tsup -w
# RUN pnpm install --prod

# WORKDIR /app/packages/db
# RUN pnpm run build

# WORKDIR /app/apps/worker
# RUN pnpm run build

# # ENV NODE_ENV=production
# ENV REDIS_HOST=host.docker.internal
# ENV REDIS_PORT=6379
# ENV DATABASE_URL=mysql://root:root@host.docker.internal:3306/banjo-rss

# # Set the command to run your app
# CMD ["node", "dist/index.cjs"]

# Use Node.js LTS version
FROM node:18-alpine AS builder

# Create directory for the application
WORKDIR /app

# Copy over the monorepo
COPY package.json .
RUN npm install -g pnpm
COPY . .

# Install Packages and build
RUN pnpm install tsup -w
RUN pnpm install --prod --filter db
RUN pnpm install --prod --filter worker
WORKDIR /app/packages/db
RUN pnpm run build
WORKDIR /app/apps/worker
RUN pnpm run build

# Production Stage
FROM node:18-alpine AS production

# Create directory for the application
WORKDIR /app

# Copy the required directories from the builder stage
## The "." at the end of the directory path maintains the directory structure
COPY --from=builder /app/packages/db ./packages/db
COPY --from=builder /app/apps/worker ./apps/worker
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json

# Change workdir to the worker app
WORKDIR /app/apps/worker

# Defining environment variables
ENV NODE_ENV=production
ENV REDIS_HOST=host.docker.internal
ENV REDIS_PORT=6379
ENV DATABASE_URL=mysql://root:root@host.docker.internal:3306/banjo-rss

# Set the command to run your app
CMD ["node", "dist/index.cjs"]